{
  "name": "express-sticker",
  "description": "Group your express routes to access them globally and save the routes path in a configuration file",
  "version": "0.1.3",
  "homepage": "",
  "author": {
    "name": "Maxime Mezrahi",
    "url": "http://github.com/maxs15"
  },
  "main": "lib/index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/maxs15/express-sticker.git"
  },
  "keywords": [
    "express",
    "stick",
    "group",
    "ressource",
    "route",
    "configuration"
  ],
  "dependencies": {},
  "devDependencies": {
    "express": "3.3.4",
    "mocha": "1.12.0"
  },
  "readmeFilename": "README.md",
  "_id": "express-sticker@0.1.0",
  "_from": "express-sticker@0.1.0",
  "contributors": [
    {
      "name": "Maxime Mezrahi"
    }
  ],
  "readme": "# express-sticker\n\n> Group your express routes to access them globally and save the routes path in a configuration file\n\n\n## Getting Started\nGroup your express routes to access them globally from all your application and save the routes path in a configuration file.\nYou can add dependencies in order to structure your code correctly.\nCheck the usage examples to see how it's working.\n\n\n```shell\nnpm install express-sticker\n```\n\n### Usage examples\n\nInitialization of the sticker\n```js\nvar express = require('express');\nvar app = express();\nvar sticker = require('../lib/index.js')(app);\n```\n\nInitialization of the routes file, possibility to add multiple files\nPossibility to pass params to the routes file.\n```js\nvar params = {prod: true};\nvar err = sticker.addRoutes(__dirname + '/routes.js', params);\n```\n\nRoutes file example:\n```js\nmodule.exports = function(params) {\n    return [{action: 'get', path: '/user', stick: 'displayUser'},\n            {action: 'get', path: '/wall', stick: 'displayWall'},\n            {action: 'get', path: '/admin', stick: 'displayAdmin', enabled: params.prod}];\n}\n```\n\nCreation of the sticks\n - Every sticks must call next(error, params) at the end of its execution.\n - The params of all the dependencies are merged in one object.\n - If there is an error in the dependencies, the execution of the dependencies is stopped and the main stick is called with the error in req.err.\n - It's possible to override a stick who is using res.end(), its res.end() will be ineffective but yours will work.\n```js\nvar stick = sticker.stick;\n\nstick('checkLogin', function(req, res, next) {\n    next(null);\n});\n\nstick('checkAvailability', function(req, res, next) {\n    next(null);\n});\n\nvar fetchUserData = stick('fetchUserData', ['checkLogin', 'checkAvailability'], function(req, res, next, params) {\n    next(null, {user: 'jack'});\n});\n\nstick('displayUser', [fetchUserData], function(req, res, next, params) {\n    if (req.error)\n        res.end('error');\n    else\n        res.end(params.user);\n    next(true, params);\n});\n\nstick('overrideDisplayUser', ['displayUser'], function(req, res, params) {\n    res.end();\n    next(null, params);\n});\n```\nUsing a variable in the dependencies array is better because faster, express-sticker doesn't have to look for the stick id but both practises are working.\n\nGet a stick and execute it\n```js\nvar myStick = sticker.stick('displayUser');\nsticker.execute(stick);\n```\n"
}
